// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTS.Data.Context;

#nullable disable

namespace TTS.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240826155121_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c953ee3-f4d1-4766-857f-94327e2b6138"),
                            CreatedBy = "Admin Test 1",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5606),
                            IsDeleted = false,
                            Location = "Suncuk Köyü",
                            Name = "Taşlık Tarla",
                            Size = 3.0,
                            SoilType = "Kumlu",
                            UserId = new Guid("b497f1b4-3299-4cb9-94af-e3a1a6c7ac8e")
                        },
                        new
                        {
                            Id = new Guid("2a5899ec-8b12-491c-9a4a-4e59c122d67d"),
                            CreatedBy = "Admin Test 2",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5610),
                            IsDeleted = false,
                            Location = "Erdemli Köyü",
                            Name = "Güney Tarla",
                            Size = 2.5,
                            SoilType = "Killi",
                            UserId = new Guid("989afd35-55a6-40a2-92b7-725a9b0e8822")
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("BatteryLevel")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ImageId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fde368ee-2228-43ee-b3cc-1ea8932843a5"),
                            BatteryLevel = 0.0,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(321),
                            FieldId = new Guid("2c953ee3-f4d1-4766-857f-94327e2b6138"),
                            ImageId = new Guid("e5008bc7-140d-4dd9-a739-5ebf8ee01fa8"),
                            IsDeleted = false,
                            Name = "Taşlıkbaş Sensör",
                            Type = "Fotokapan"
                        },
                        new
                        {
                            Id = new Guid("0123f278-ff34-44d0-af18-f7f5882ed35a"),
                            BatteryLevel = 0.0,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(326),
                            FieldId = new Guid("2a5899ec-8b12-491c-9a4a-4e59c122d67d"),
                            ImageId = new Guid("d4a15540-afae-449e-b942-08b0e4e8f09c"),
                            IsDeleted = false,
                            Name = "Güney Tarla Sensör",
                            Type = "Toprak Nem Sensörü"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorDatas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7bde811-3e08-4378-96be-d1d1fd1771d2"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9648),
                            IsDeleted = false,
                            SensorId = new Guid("fde368ee-2228-43ee-b3cc-1ea8932843a5"),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9651),
                            Unit = "°C",
                            Value = "Fotokapan kayıtlarına göre bir canlı kayıtlara girmiştir."
                        },
                        new
                        {
                            Id = new Guid("81bb1b9f-ce56-4408-b00b-f7eb0e54c596"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9654),
                            IsDeleted = false,
                            SensorId = new Guid("0123f278-ff34-44d0-af18-f7f5882ed35a"),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9656),
                            Unit = "pH",
                            Value = "Toprak nemi 12 bar olarak ölçülmüştür."
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de5d956-82d9-4a56-8de5-7d440eb4216f"),
                            ConcurrencyStamp = "580b5fe5-8370-427a-964e-071ec9e52430",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("b270ae59-5d7a-4ae8-bca1-2bf521af61cd"),
                            ConcurrencyStamp = "4127fdb0-7114-4e52-8ff6-3b897aad4c5c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("002bcc7c-5f3d-41fd-8fa2-2c3168a09be9"),
                            ConcurrencyStamp = "7418807d-6a34-4a5c-b8cd-d6c85aa12fee",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b497f1b4-3299-4cb9-94af-e3a1a6c7ac8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "496babcb-cc42-4acc-b186-61d873cdb169",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esat Emir",
                            ImageId = new Guid("e5008bc7-140d-4dd9-a739-5ebf8ee01fa8"),
                            LastName = "Albayrakoglu",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENJDhoI5koI1v8fL6Mg5h5mco7sEup/1+2YT8UTGDtcylayMGN0cfNxI2BG/SFWVZQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a9557dad-19c5-4676-89b8-dbb585d53ed7",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("989afd35-55a6-40a2-92b7-725a9b0e8822"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb455e4c-9dad-4c2a-b3f3-e15c7feb2e26",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melih",
                            ImageId = new Guid("d4a15540-afae-449e-b942-08b0e4e8f09c"),
                            LastName = "Albayrakoglu",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9dM7og+uM4d32XbiEpbw8TqEXyLUSPBcpwyOkgdNQtDkneDMURUbNbjwh+u5tIzA==",
                            PhoneNumber = "1234566480",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edf52030-2600-418a-bb98-478a8de48a74",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b497f1b4-3299-4cb9-94af-e3a1a6c7ac8e"),
                            RoleId = new Guid("3de5d956-82d9-4a56-8de5-7d440eb4216f")
                        },
                        new
                        {
                            UserId = new Guid("989afd35-55a6-40a2-92b7-725a9b0e8822"),
                            RoleId = new Guid("b270ae59-5d7a-4ae8-bca1-2bf521af61cd")
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5008bc7-140d-4dd9-a739-5ebf8ee01fa8"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5832),
                            FileName = "İmages/testimage",
                            FileType = "jpg",
                            ImageType = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d4a15540-afae-449e-b942-08b0e4e8f09c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5835),
                            FileName = "İmages/pythontest",
                            FileType = "png",
                            ImageType = 0,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("PackagingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3082f889-efac-4a83-8eda-622dfe90c5b4"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5913),
                            IsDeleted = false,
                            Number = 1,
                            PackagingDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5915),
                            Type = "Kutu"
                        },
                        new
                        {
                            Id = new Guid("b411f8df-5816-4ba7-a86b-1d96c699b02c"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5917),
                            IsDeleted = false,
                            Number = 2,
                            PackagingDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5918),
                            Type = "Torba"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f214b7d2-b956-438f-a439-397d51529e1f"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(489),
                            FacilityId = new Guid("93580e2a-268c-4fab-a91d-76791940d6c6"),
                            FieldId = new Guid("2c953ee3-f4d1-4766-857f-94327e2b6138"),
                            IsDeleted = false,
                            Name = "Fındık Transfer",
                            PackageId = new Guid("3082f889-efac-4a83-8eda-622dfe90c5b4"),
                            ProductId = new Guid("971f7086-05e6-4c7a-92a8-216c924affdb"),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(492),
                            VehicleId = new Guid("7e52c16f-83f5-4fed-83d4-d64e1edc4098")
                        },
                        new
                        {
                            Id = new Guid("cb6de695-3d05-4439-89c9-30493779abe9"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(495),
                            FacilityId = new Guid("308aa8dc-7e56-4ef9-8a23-b21fad372cd4"),
                            FieldId = new Guid("2a5899ec-8b12-491c-9a4a-4e59c122d67d"),
                            IsDeleted = false,
                            Name = "Kestane Transfer",
                            PackageId = new Guid("b411f8df-5816-4ba7-a86b-1d96c699b02c"),
                            ProductId = new Guid("64ef8e12-5802-4295-b902-ab9e3f9f03bd"),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(497),
                            VehicleId = new Guid("cd55a1fb-e592-4679-8bca-5883dec0163f")
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e52c16f-83f5-4fed-83d4-d64e1edc4098"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 388, DateTimeKind.Local).AddTicks(5011),
                            DriverName = "Esat Emir Albayrakoğlu",
                            IsDeleted = false,
                            Model = "Renault Clio 2006",
                            Plate = "81 AH 975"
                        },
                        new
                        {
                            Id = new Guid("cd55a1fb-e592-4679-8bca-5883dec0163f"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 388, DateTimeKind.Local).AddTicks(5018),
                            DriverName = "Melih Albayrakoğlu",
                            IsDeleted = false,
                            Model = "Toyota Corolla 2005",
                            Plate = "06 DSA 100"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Market.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("971f7086-05e6-4c7a-92a8-216c924affdb"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5994),
                            IsDeleted = false,
                            Name = "Fındık",
                            Price = 130m
                        },
                        new
                        {
                            Id = new Guid("64ef8e12-5802-4295-b902-ab9e3f9f03bd"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5999),
                            IsDeleted = false,
                            Name = "Kestane",
                            Price = 250m
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.Market.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProductCount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("769256ce-a7b0-48e8-853b-08a8a4257639"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9539),
                            IsDeleted = false,
                            ProductCount = 1m,
                            ProductId = new Guid("971f7086-05e6-4c7a-92a8-216c924affdb"),
                            SaleDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9542),
                            UserId = new Guid("b497f1b4-3299-4cb9-94af-e3a1a6c7ac8e")
                        },
                        new
                        {
                            Id = new Guid("dfe84775-a1a2-4df3-a910-873c86876138"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9544),
                            IsDeleted = false,
                            ProductCount = 2m,
                            ProductId = new Guid("64ef8e12-5802-4295-b902-ab9e3f9f03bd"),
                            SaleDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(9546),
                            UserId = new Guid("989afd35-55a6-40a2-92b7-725a9b0e8822")
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.UretimIslemleri.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93580e2a-268c-4fab-a91d-76791940d6c6"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5398),
                            IsDeleted = false,
                            Location = "Düzce",
                            Name = "TMO"
                        },
                        new
                        {
                            Id = new Guid("308aa8dc-7e56-4ef9-8a23-b21fad372cd4"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 384, DateTimeKind.Local).AddTicks(5420),
                            IsDeleted = false,
                            Location = "Ankara",
                            Name = "Albayrakoğlu Tarım İşletmesi"
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.UretimIslemleri.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9cdd9ca-b23c-4b0f-bd23-28ecbeb6be66"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(412),
                            ExpirationDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Kurutmaya bırakıldı",
                            Parameter = "Kurutma",
                            ProductId = new Guid("971f7086-05e6-4c7a-92a8-216c924affdb"),
                            ProductionDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(414)
                        },
                        new
                        {
                            Id = new Guid("30a9512b-ed73-4338-988c-5b43bc810de0"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(419),
                            ExpirationDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ayıklandı",
                            Parameter = "Ayıklama",
                            ProductId = new Guid("64ef8e12-5802-4295-b902-ab9e3f9f03bd"),
                            ProductionDate = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Timestamp = new DateTime(2024, 8, 26, 18, 51, 21, 385, DateTimeKind.Local).AddTicks(420)
                        });
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Field", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", "User")
                        .WithMany("Fields")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Sensor", b =>
                {
                    b.HasOne("TTS.Entity.Entities.CevreselIzleme.Field", "Field")
                        .WithMany("Sensors")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Identity.Image", "Image")
                        .WithMany("Sensors")
                        .HasForeignKey("ImageId");

                    b.Navigation("Field");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.SensorData", b =>
                {
                    b.HasOne("TTS.Entity.Entities.CevreselIzleme.Sensor", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppRoleClaim", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserClaim", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserLogin", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUserToken", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Transport", b =>
                {
                    b.HasOne("TTS.Entity.Entities.UretimIslemleri.Facility", "Facility")
                        .WithMany("Transports")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.CevreselIzleme.Field", "Field")
                        .WithMany("Transports")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Lojistik.Package", "Package")
                        .WithMany("Transports")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Market.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Lojistik.Vehicle", "Vehicle")
                        .WithMany("Transports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Field");

                    b.Navigation("Package");

                    b.Navigation("Product");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Vehicle", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Identity.Image", null)
                        .WithMany("Vehicle")
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Market.Product", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Market.Product", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Market.Sale", b =>
                {
                    b.HasOne("TTS.Entity.Entities.Market.Product", "Product")
                        .WithMany("Sale")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTS.Entity.Entities.Identity.AppUser", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TTS.Entity.Entities.UretimIslemleri.Stage", b =>
                {
                    b.HasOne("TTS.Entity.Entities.UretimIslemleri.Facility", null)
                        .WithMany("Stages")
                        .HasForeignKey("FacilityId");

                    b.HasOne("TTS.Entity.Entities.Market.Product", "Product")
                        .WithMany("Stages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Field", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("TTS.Entity.Entities.CevreselIzleme.Sensor", b =>
                {
                    b.Navigation("SensorData");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Identity.Image", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Users");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Package", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Lojistik.Vehicle", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("TTS.Entity.Entities.Market.Product", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Sale");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("TTS.Entity.Entities.UretimIslemleri.Facility", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Transports");
                });
#pragma warning restore 612, 618
        }
    }
}
